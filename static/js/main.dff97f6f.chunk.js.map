{"version":3,"sources":["js/services/db.js","js/utils/index.js","js/components/Canvas/index.js","js/constants/size.js","js/constants/cells.js","js/constants/life.js","js/constants/lifecycles.js","js/actions/life.js","js/containers/Container.js","js/actions/size.js","js/actions/cells.js","js/components/Pattern/index.js","js/components/Buttons/index.js","js/components/Frequency/index.js","js/components/Chart/index.js","js/services/chart.js","js/containers/Controls.js","js/components/Output/index.js","js/containers/Header.js","js/sagas/db.js","js/sagas/cells.js","js/sagas/play.js","js/reducers/life.js","js/reducers/size.js","js/reducers/interval.js","js/Store.js","js/App.js","index.js"],"names":["db","formKey","x","y","unformKey","str","split","map","Number","createNeighboursArray","maxX","maxY","coord","isEqualMap","a","b","size","equal","forEach","value","key","get","countNextGeneration","cells","sizeState","xCount","yCount","keys","emptyCells","keysArray","Array","from","neighbour","has","push","newGeneration","Map","concat","cell","aliveNeighbours","set","colors","drawCells","canvasRef","props","filled","current","console","warn","context","getContext","rectSize","coords","fillStyle","fillRect","filledCells","c","Canvas","width","height","onClick","prevProps","ref","useRef","useEffect","usePrevious","useState","updateFilledCells","Object","isEqualObj","clearRect","strokeStyle","beginPath","globalAlpha","i","moveTo","lineTo","lineWidth","stroke","closePath","drawCanvas","className","e","nativeEvent","offsetX","offsetY","Math","floor","WINDOW_SIZE_CHANGE","SCALE_CHANGE","TOGGLE_CELL","TOGGLE_CELL_DONE","ADD_PATTERN","ADD_PATTERN_DONE","PLAY_LIFE","STOP_LIFE","NEXT_STEP","NEXT_STEP_DONE","NEXT_STEP_ERROR","CHANGE_FREQUENCY","RESET_LIFE","REQUEST_PREVIOUS_STEP","RECEIVE_PREVIOUS_STEP","REQUEST_LAST_STEP","RESTORE_LIFE","stopLife","type","playLife","connect","state","dispatch","container","resizeHandler","sizes","clientWidth","clientHeight","window","addEventListener","removeEventListener","toggleCell","canvasWidth","canvasHeight","Pattern","onAddPattern","text","defaultValue","name","cols","rows","pattern","Buttons","onNext","onZoom","onPrev","onReset","onPlay","isPlaying","id","Frequency","frequency","onChange","htmlFor","target","max","min","step","Chart","withStore","callback","Promise","resolve","reject","openreq","indexedDB","open","onerror","error","onupgradeneeded","result","createObjectStore","onsuccess","getDB","then","transaction","oncomplete","objectStore","idbKeyval","this","prototype","req","store","put","delete","getAll","getLast","last","pop","isInteger","clear","openKeyCursor","openCursor","call","continue","drawChart","win","steps","cycle","html","document","write","interval","running","direction","scaleChanged","Output","aliveCells","xSize","ySize","restoreLife","previousStep","dbSaga","getCells","resetDb","saveStep","action","restore","select","takeEvery","setInterval","r","length","keysToDelete","slice","log","addPattern","cellSaga","getSize","newCells","readOnly","patternString","patternHeight","patternWidth","row","len","startY","startX","j","reduce","acc","play","nextStep","tick","playSaga","getInterval","stop","intervalState","timeout","round","delay","cellsState","nextGeneration","clearInterval","initState","sagaMiddleware","createSagaMiddleware","reducers","combineReducers","setRectSize","newRectSize","Store","createStore","applyMiddleware","run","cellsSaga","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.dff97f6f.chunk.js","sourcesContent":["var db;\n\nfunction getDB(name) {\n  if (!db) {\n    db = new Promise((resolve, reject) => {\n      const openreq = indexedDB.open(`${name}-db`, 1);\n\n      openreq.onerror = () => {\n        reject(openreq.error);\n      };\n\n      openreq.onupgradeneeded = () => {\n        // First time setup: create an empty object store\n        openreq.result.createObjectStore(name);\n      };\n\n      openreq.onsuccess = () => {\n        resolve(openreq.result);\n      };\n    });\n  }\n  return db;\n}\n\nfunction withStore(name, type, callback) {\n  return getDB(name).then((db) => {\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction(name, type);\n      transaction.oncomplete = () => {\n        resolve();\n      };\n      transaction.onerror = () => {\n        reject(transaction.error);\n      };\n      callback(transaction.objectStore(name));\n    });\n  });\n}\n\nfunction idbKeyval(name) {\n  this.name = name;\n  return this;\n}\n\nidbKeyval.prototype = {\n  get(key) {\n    var req;\n    return withStore(this.name, 'readonly', (store) => {\n      req = store.get(key);\n    }).then(function () {\n      return req.result;\n    });\n  },\n\n  set(key, value) {\n    return withStore(this.name, 'readwrite', (store) => {\n      store.put(value, key);\n    });\n  },\n\n  delete (key) {\n    return withStore(this.name, 'readwrite', (store) => {\n      store.delete(key);\n    });\n  },\n\n  getAll() {\n    var req;\n    return withStore(this.name, 'readonly', (store) => {\n      req = store.getAll();\n    }).then(function () {\n      return req.result;\n    });\n  },\n\n  getLast() {\n    return this.keys().then(keys => {\n      const last = keys.pop();\n      return Number.isInteger(last) ? this.get(last).then(result => ({\n        step: last,\n        cells: result\n      })) : null;\n    })\n  },\n\n  clear() {\n    return withStore(this.name, 'readwrite', (store) => {\n      store.clear();\n    });\n  },\n\n  keys () {\n    var keys = [];\n    return withStore(this.name, 'readonly', (store) => {\n      // This would be store.getAllKeys(), but it isn't supported by Edge or Safari.\n      // And openKeyCursor isn't supported by Safari.\n      (store.openKeyCursor || store.openCursor).call(store).onsuccess = function () {\n        if (!this.result) return;\n        keys.push(this.result.key);\n        this.result.continue();\n      };\n    }).then(function () {\n      return keys;\n    });\n  }\n};\n\nexport default new idbKeyval('life');\n","export const formKey = (x, y) => `${x}x${y}`;\nexport const unformKey = (str) => str.split('x').map(Number);\n\nexport const createNeighboursArray = (x, y, maxX, maxY) => [\n  [x - 1, y - 1],\n  [x, y - 1],\n  [x + 1, y - 1],\n  [x - 1, y],\n  [x + 1, y],\n  [x - 1, y + 1],\n  [x, y + 1],\n  [x + 1, y + 1]\n]\n  .map(coord => {\n    let [x, y] = coord;\n\n    if (x < 0) {\n      x += maxX;\n    } else if (x >= maxX) {\n      x -=  maxX;\n    }\n\n    if (y < 0) {\n      y += maxY;\n    } else if (y >= maxY) {\n      y -= maxY;\n    }\n\n    return [x, y];\n  });\n\nexport const isEqualMap = (a, b) => {\n\n  if (a.size !== b.size) return false;\n\n  let equal = true;\n\n  a.forEach((value, key) => {\n    if (!value !== !b.get(key)) {\n      equal = false;\n    }\n  });\n\n  if (!equal) return equal;\n\n  b.forEach((value, key) => {\n    if (!a.get(key) !== !value) {\n      equal = false;\n    }\n  });\n\n  return equal;\n};\n\nexport const countNextGeneration = (cells, sizeState) => {\n\n  const { xCount, yCount } = sizeState;\n  const keys = cells.keys();\n  const emptyCells = [];\n  const keysArray = Array.from(keys);\n\n  keysArray.forEach((key) => {\n    const [x, y] = unformKey(key);\n    createNeighboursArray(x, y, xCount, yCount)\n      .forEach(neighbour => {\n        const [x, y] = neighbour;\n        const key = formKey(x, y);\n        if (!cells.has(key)) {\n          emptyCells.push(key)\n        }\n      });\n  });\n\n  const newGeneration = new Map();\n\n  keysArray.concat(emptyCells)\n    .forEach((key) => {\n      const cell = cells.has(key);\n      const [x, y] = unformKey(key);\n\n      let aliveNeighbours = 0;\n\n      createNeighboursArray(x, y, xCount, yCount)\n        .forEach(neighbour => {\n          const [x, y] = neighbour;\n\n          const cell = cells.get(formKey(x, y));\n\n          if (cell) {\n            aliveNeighbours++;\n          }\n        });\n\n      if (cell) {\n        if (aliveNeighbours > 1 && aliveNeighbours < 4) {\n          newGeneration.set(key, 1);\n        }\n      } else if (aliveNeighbours === 3) {\n        newGeneration.set(key, 1);\n      }\n    });\n\n  return newGeneration;\n};\n\nexport const isEqualObj = (a, b) => {\n  let equal = true;\n\n  Object.keys(a).forEach((key) => {\n    if (a[key] !== b[key]) {\n      equal = false;\n    }\n  });\n\n  if (!equal) return equal;\n\n  Object.keys(b).forEach((key) => {\n    if (a[key] !== b[key]) {\n      equal = false;\n    }\n  });\n\n  return equal;\n};","import React, { Component, useRef, useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { unformKey, createNeighboursArray, formKey, isEqualObj, isEqualMap } from '../../utils/index';\n\nconst colors = {\n  white: '#FFF',\n  black: '#000',\n  grey: '#EEE'\n}\n\nconst drawCells = (canvasRef, props, filled) => {\n  if (!canvasRef.current) {\n    return console.warn('canvasRef is not rendered yet');\n  }\n\n  const context = canvasRef.current.getContext('2d');\n  const { rectSize, xCount, yCount } = props;\n  const cells = props.cells.cells;\n\n  filled.forEach(coords => {\n    const [x, y] = coords;\n    context.fillStyle = colors.white;\n    context.fillRect(x * rectSize + 1, y * rectSize + 1, rectSize - 1, rectSize - 1);\n  });\n\n  const filledCells = [];\n\n  cells\n    .forEach((cell, key) => {\n      const [x, y] = unformKey(key);\n\n      if (cell) { // if cell is alive - check its neighbours\n        createNeighboursArray(x, y, xCount, yCount)\n          .forEach(neighbour => {\n            const [x, y] = neighbour;\n            const key = formKey(x, y);\n            const c = cells.get(key);\n            context.fillStyle = c ? colors.black : colors.white;\n            if (c) {\n              filledCells.push([x, y])\n            }\n            context.fillRect(x * rectSize + 1, y * rectSize + 1, rectSize - 1, rectSize - 1);\n          });\n          filledCells.push([x, y]);\n      }\n\n      context.fillStyle = cell ? colors.black : colors.white;\n      context.fillRect(x * rectSize + 1, y * rectSize + 1, rectSize - 1, rectSize - 1);\n    });\n\n  return filledCells;\n}\n\nconst drawCanvas = (canvasRef, props, filled, updateFilledCells) => {\n  if (!canvasRef.current) {\n    return console.warn('canvasRef is not rendered yet');\n  }\n  const { rectSize, width, height } = props;\n  const context = canvasRef.current.getContext('2d');\n\n  context.clearRect(0, 0, width, height);\n  context.strokeStyle = colors.grey;\n  context.beginPath();\n  context.globalAlpha = 1;\n\n  for (let i = height; i--;) { //horizontal lines\n    context.moveTo(0, rectSize * i);\n    context.lineTo(rectSize * width, rectSize * i);\n  }\n\n  for (let i = width; i--;) { //vertical lines\n    context.moveTo(rectSize * i, 0);\n    context.lineTo(rectSize * i, rectSize * height);\n  }\n\n  context.lineWidth = 1;\n  context.stroke();\n  context.closePath();\n\n  return drawCells(canvasRef, props, filled);\n}\n/**\n * Hook that saves previous value of the props\n * @param  {} value\n */\nconst usePrevious = (value) => {\n  const ref = useRef();\n  useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n}\n\nconst Canvas = (props) => {\n  const { width, height, rectSize, onClick, xCount, yCount, cells } = props;\n  const prevProps = usePrevious(props);\n  const [filled, updateFilledCells] = useState([]);\n  const canvasRef = useRef();\n\n  useEffect(() => {\n    const prev = {\n      width: prevProps?.width,\n      height: prevProps?.height,\n      rectSize: prevProps?.rectSize,\n      xCount: prevProps?.xCount,\n      yCount: prevProps?.yCount\n    };\n    const next = {\n      width: width,\n      height: height,\n      rectSize: rectSize,\n      xCount: xCount,\n      yCount: yCount\n    };\n\n    if (!isEqualObj(prev, next)) {\n      updateFilledCells(drawCanvas(canvasRef, props, filled));\n    } else if (!isEqualMap(cells.cells, prevProps.cells.cells)) {\n      updateFilledCells(drawCells(canvasRef, props, filled, updateFilledCells));\n    }\n\n  }, [width, height, rectSize, xCount, yCount, cells.cells])\n\n  const handleClick = (e) => {\n    const { offsetX, offsetY } = e.nativeEvent;\n    const x = Math.floor(offsetX / rectSize);\n    const y = Math.floor(offsetY / rectSize);\n    onClick({ x, y });\n  }\n\n\n  return (\n    <canvas\n      className=\"app-canvas\"\n      width={width}\n      height={height}\n      onClick={handleClick}\n      ref={canvasRef} />\n  );\n}\n\nCanvas.propTypes = {\n  width: PropTypes.number,\n  height: PropTypes.number,\n  xCount: PropTypes.number,\n  yCount: PropTypes.number,\n  rectSize: PropTypes.number,\n  cells: PropTypes.any,\n  onClick: PropTypes.func,\n};\n\nexport default Canvas;\n\n","export const WINDOW_SIZE_CHANGE = 'WINDOW_SIZE_CHANGE';\nexport const SCALE_CHANGE = 'SCALE_CHANGE';\n","export const TOGGLE_CELL = 'TOGGLE_CELL';\nexport const TOGGLE_CELL_DONE = 'TOGGLE_CELL_DONE';\nexport const ADD_PATTERN = 'ADD_PATTERN';\nexport const ADD_PATTERN_DONE = 'ADD_PATTERN_DONE';","export const PLAY_LIFE = 'PLAY_LIFE';\nexport const STOP_LIFE = 'STOP_LIFE';\nexport const NEXT_STEP = 'NEXT_STEP';\nexport const NEXT_STEP_DONE = 'NEXT_STEP_DONE';\nexport const NEXT_STEP_ERROR = 'NEXT_STEP_ERROR';\nexport const CHANGE_FREQUENCY = 'CHANGE_FREQUENCY';","export const RESET_LIFE = 'RESET_LIFE';\nexport const REQUEST_PREVIOUS_STEP = 'REQUEST_PREVIOUS_STEP';\nexport const RECEIVE_PREVIOUS_STEP = 'RECEIVE_PREVIOUS_STEP';\nexport const REQUEST_LAST_STEP = 'REQUEST_LAST_STEP';\nexport const RESTORE_LIFE = 'RESTORE_LIFE';\nexport const READ_ONLY_ERROR = 'READ_ONLY_ERROR';\n","import {\n  PLAY_LIFE,\n  STOP_LIFE,\n  NEXT_STEP,\n  CHANGE_FREQUENCY\n} from '../constants/life';\n\nimport { REQUEST_LAST_STEP, REQUEST_PREVIOUS_STEP, RESET_LIFE } from '../constants/lifecycles'\n\nexport const onFrequencyChange = (frequency) => {\n  return {\n    type: CHANGE_FREQUENCY,\n    frequency\n  };\n};\n\nexport const stopLife = () => {\n  return {\n    type: STOP_LIFE\n  }\n};\n\nexport const playLife = () => {\n  return {\n    type: PLAY_LIFE\n  }\n};\n\nexport const restoreLife = () => ( {\n  type: REQUEST_LAST_STEP\n});\n\nexport const resetLife = () => {\n  return {\n    type: RESET_LIFE\n  }\n};\n\nexport const previousStep = (step) => ({\n  type: REQUEST_PREVIOUS_STEP\n});\n\nexport const nextStep = () => {\n  return {\n    type: NEXT_STEP\n  }\n};\n","import React, { useEffect, useRef } from 'react';\nimport Canvas from '../components/Canvas';\nimport { connect } from 'react-redux';\nimport { windowSizeChanged } from '../actions/size';\nimport { toggleCell } from '../actions/cells';\nimport { restoreLife } from '../actions/life';\n\nconst mapStateToProps = (state) => {\n  return {\n    size: state.size,\n    cells: state.cells\n  };\n};\n\nconst Container = ({ size, cells, dispatch }) => {\n  const container = useRef(null);\n\n  useEffect(() => {\n    dispatch(restoreLife());\n\n    const resizeHandler = () => {\n      dispatch(\n        windowSizeChanged({ // - paddings and borders\n          width: container.current.clientWidth,\n          height: container.current.clientHeight\n        })\n      );\n    };\n    // set resize listener\n    window.addEventListener('resize', resizeHandler);\n\n    resizeHandler();\n    // clean up function\n    return () => {\n      // remove resize listener\n      window.removeEventListener('resize', resizeHandler);\n    }\n  }, [])\n\n  const onCanvasClick = (coords) => dispatch(toggleCell(coords));\n\n  return (\n    <div className=\"mdl-layout__content container-container\">\n      <div className=\"page-content container-content\" ref={container}>\n        <Canvas\n          onClick={onCanvasClick}\n          width={size.canvasWidth}\n          height={size.canvasHeight}\n          xCount={size.xCount}\n          yCount={size.yCount}\n          rectSize={size.rectSize}\n          cells={cells}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default connect(mapStateToProps)(Container);\n","import {\n  WINDOW_SIZE_CHANGE,\n  SCALE_CHANGE\n} from '../constants/size';\n\nexport const windowSizeChanged = (sizes) => {\n  return {\n    type: WINDOW_SIZE_CHANGE,\n    sizes\n  }\n};\n\nexport const scaleChanged = (direction) => {\n  return {\n    type: SCALE_CHANGE,\n    direction\n  }\n};","import { TOGGLE_CELL, ADD_PATTERN } from '../constants/cells';\n\nexport const onAddPattern = (pattern) => {\n  return {\n    type: ADD_PATTERN,\n    pattern\n  };\n};\n\n\nexport const toggleCell = (coords) => {\n  return {\n    type: TOGGLE_CELL,\n    coords,\n  }\n};","import React, { useRef } from 'react';\nimport PropTypes from 'prop-types';\n\nconst Pattern = ({onAddPattern}) => {\n  const text = useRef(null);\n  const handleAddPattern = () => {\n    const pattern = text.current.value;\n    text.current.value = '';\n    onAddPattern(pattern);\n  }\n  return (\n    <div>\n      <div className=\"pattern-textarea\">\n      <textarea\n        defaultValue={`\n        .*...\n        *.*.\n        *.**\n        .*...\n        `}\n        ref={text}\n        className=\"mdl-textfield__input materialize-textarea pattern-textarea-input\"\n        name=\"pattern\"\n        cols=\"20\"\n        rows=\"5\"\n      />\n      </div>\n      <div className=\"mdl-list\">\n        <output className=\"mdl-list__item\">\n          Paste a pattern into textarea above.\n          Use symbol `*` - to make alive cells.\n          Pattern will be inserted at the center of the canvas.\n        </output>\n        <div className=\"pattern-inputs\">\n          <div className=\"buttons\">\n            <button onClick={handleAddPattern}\n                    className=\"mdl-button mdl-js-button mdl-button--raised mdl-button--colored pattern-inputs-button\">\n              <i className=\"material-icons\">content_paste</i> Add Pattern\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n\nPattern.propTypes = {\n  onAddPattern: PropTypes.func,\n};\n\nexport default Pattern;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Buttons = ({onNext, onZoom, onPrev, onReset, onPlay, isPlaying}) => {\n  return (\n    <div className=\"buttons\">\n      <div>\n        <button onClick={onPrev} className=\"mdl-button mdl-js-button mdl-button--raised mdl-button--colored\"\n                id=\"step-back\"><i\n          className=\"material-icons\">skip_previous</i></button>\n        <button onClick={onNext} className=\"mdl-button mdl-js-button mdl-button--raised mdl-button--colored\"\n                id=\"step-forward\"><i\n          className=\"material-icons\">skip_next</i></button>\n        <button onClick={onPlay}\n                className=\"mdl-button mdl-js-button mdl-button--raised mdl-button--colored\">\n          <i\n            className=\"material-icons\">{isPlaying ? 'pause' : 'play_arrow'}</i></button>\n      </div>\n      <div>\n        <button onClick={() => onZoom(+1)} className=\"mdl-button mdl-js-button mdl-button--raised mdl-button--colored\"\n                id=\"zoom-in\"><i\n          className=\"material-icons\">zoom_in</i></button>\n        <button onClick={() => onZoom(-1)} className=\"mdl-button mdl-js-button mdl-button--raised mdl-button--colored\"\n                id=\"zoom-out\"><i\n          className=\"material-icons\">zoom_out</i></button>\n        <button onClick={onReset}\n                className=\"mdl-button mdl-js-button mdl-button--raised mdl-button--colored\">\n          <i\n            className=\"material-icons\">stop</i></button>\n      </div>\n    </div>\n  );\n};\n\nButtons.propTypes = {\n  isPlaying: PropTypes.bool,\n  onPlay: PropTypes.func,\n  onReset: PropTypes.func,\n  onNext: PropTypes.func,\n  onPrev: PropTypes.func,\n  onZoom: PropTypes.func,\n};\n\nexport default Buttons;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Frequency = ({frequency, onChange}) => {\n  return (\n    <div className=\"slider mdl-list\">\n      <label htmlFor=\"timeout-input\" className=\"mdl-list__item slider-label\">\n        <div className=\"slider-label-text\">Frequency:</div>\n        <div className=\"slider-label-text\">{frequency} cycles per minute</div>\n      </label>\n      <div className=\"\">\n        <input value={frequency} onChange={e => onChange(Number(e.target.value))}\n               className=\"mdl-list__item mdl-slider mdl-js-slider\" id=\"timeout-input\" type=\"range\" max=\"5000\"\n               min=\"1\" step=\"1\"/>\n      </div>\n    </div>\n  );\n};\n\nFrequency.propTypes = {\n  frequency: PropTypes.number,\n  onChange: PropTypes.func,\n};\n\nexport default Frequency;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Chart = ({onClick}) => {\n  return (\n    <div className=\"buttons mdl-list\">\n      <div onClick={onClick} className=\"mdl-button mdl-js-button mdl-button--raised mdl-button--colored pattern-inputs-button\"><i\n        className=\"material-icons\">timeline</i> Draw chart\n      </div>\n    </div>\n  );\n};\n\nChart.propTypes = {\n  onClick: PropTypes.func\n};\n\nexport default Chart;\n","import db from './db';\n\nconst generateHtml = (data) => {\n  return `<!DOCTYPE html>\n    <style>\n    html,body,svg { height:100%; width:100%;}\n    </style>\n<svg width=\"100%\" height=\"100%\"></svg>\n<script src=\"https://d3js.org/d3.v4.min.js\"></script>\n<script>\nvar data = [${data}]\nvar svg = d3.select(\"svg\"),\n    margin = {top: 20, right: 20, bottom: 30, left: 50},\n    width = window.innerWidth - margin.left - margin.right,\n    height = window.innerHeight - margin.top - margin.bottom,\n    g = svg.append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\nvar x = d3.scaleLinear()\n    .rangeRound([0, width]);\nvar y = d3.scaleLinear()\n    .rangeRound([height, 0]);\nvar area = d3.area()\n    .x(function(d, i) { return x(i); })\n    .y1(function(d) { return y(d); });\n  x.domain(d3.extent(data, function(d, i) { return i; }));\n  y.domain([0, d3.max(data, function(d) { return d; })]);\n  area.y0(y(0));\n  g.append(\"path\")\n      .datum(data)\n      .attr(\"fill\", \"steelblue\")\n      .attr(\"d\", area);\n  g.append(\"g\")\n      .attr(\"transform\", \"translate(0,\" + height + \")\")\n      .call(d3.axisBottom(x))\n      .append(\"text\")\n       .attr(\"fill\", \"#000\")\n //      .attr(\"transform\", \"rotate(-90)\")\n       .attr(\"x\", width - 10)\n       .attr(\"y\", 15)\n       .attr(\"dX\", \"0.7em\")\n       .attr(\"text-anchor\", \"end\")\n       .text(\"Cycles\");\n      ;\n  g.append(\"g\")\n      .call(d3.axisLeft(y))\n    .append(\"text\")\n      .attr(\"fill\", \"#000\")\n      .attr(\"transform\", \"rotate(-90)\")\n      .attr(\"y\", 6)\n      .attr(\"dy\", \"0.71em\")\n      .attr(\"text-anchor\", \"end\")\n      .text(\"Alive cells\");\n</script>`;\n};\n\nexport const drawChart = () => {\n  const win = window.open();\n  if (win) {\n    db.getAll()\n      .then(result => {\n        const steps = result\n          .map(cycle => cycle.size);\n        const html = generateHtml(steps);\n        win.document.write(html);\n      });\n  }\n};","import React from 'react';\nimport { connect } from 'react-redux';\nimport { onAddPattern } from '../actions/cells';\nimport { nextStep, onFrequencyChange, stopLife, playLife, resetLife, previousStep } from '../actions/life';\nimport { scaleChanged } from '../actions/size';\nimport Pattern from '../components/Pattern';\nimport Buttons from '../components/Buttons';\nimport Frequency from '../components/Frequency';\nimport DrawChart from '../components/Chart';\nimport { drawChart } from '../services/chart';\n\nconst mapStateToProps = (state) => {\n  return {\n    size: state.size,\n    interval: state.interval\n  };\n};\n\nconst Controls = ({ interval, dispatch }) => {\n  const handleFrequencyChange = (value) => dispatch(onFrequencyChange(value));\n  const onBackStep = () => dispatch(previousStep());\n  const onNextStep = () => dispatch(nextStep());\n  const onReset = () => dispatch(resetLife());\n  const onPlay = () => dispatch(interval.running ? stopLife() : playLife());\n  const handleAddPattern = (pattern) => dispatch(onAddPattern(pattern));\n  const onZoom = (direction) => dispatch(scaleChanged(direction));\n\n  return (\n    <div className=\"controls mdl-layout__drawer\">\n      <Pattern\n        isPlaying={interval.running}\n        onAddPattern={handleAddPattern}\n      />\n      <Buttons\n        isPlaying={interval.running}\n        onPlay={onPlay}\n        onReset={onReset}\n        onPrev={onBackStep}\n        onZoom={onZoom}\n        onNext={onNextStep}\n      />\n      <Frequency\n        onChange={handleFrequencyChange}\n        frequency={interval.frequency}\n      />\n      <DrawChart\n        onClick={drawChart}\n      />\n    </div>\n  );\n}\n\nexport default connect(mapStateToProps)(Controls);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Output = ({aliveCells, cycle, xSize, ySize, error}) => {\n  return (\n    <div className=\"logs mdl-list\">\n      <div className=\"mdl-list__item logs-item\">Cycles: {cycle}</div>\n      <div className=\"mdl-list__item logs-item\">Board size: {xSize}x{ySize}</div>\n      <div className=\"mdl-list__item logs-item\">Alive cells: {aliveCells}</div>\n      <div id=\"info\" className=\"mdl-list__item logs-item error\">{error}</div>\n      <div className=\"mdl-list__item message logs-item\">\n        You can add or remove cells by clicking on canvas\n      </div>\n    </div>\n  );\n};\n\nOutput.propTypes = {\n  aliveCells: PropTypes.number,\n  cycle: PropTypes.number,\n  xSize: PropTypes.number,\n  ySize: PropTypes.number,\n  error: PropTypes.string,\n};\n\nexport default Output;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport Output from '../components/Output';\nimport { playLife, stopLife } from '../actions/life';\n\nconst mapStateToProps = (state) => {\n  return {\n    size: state.size,\n    cells: state.cells,\n    interval: state.interval\n  };\n};\n\nconst Header = ({ dispatch, interval, size, cells }) => {\n\n  const onPlay = () => dispatch(interval.running ? stopLife() : playLife());\n\n  return (\n    <div className=\"mdl-layout__header\">\n      <div className=\"mdl-layout__header-row\">\n        <span className=\"mdl-layout-title\"></span>\n        <div className=\"mdl-layout-spacer\">\n          <div className=\"header-button\">\n            <button onClick={onPlay}\n              className=\"mdl-button mdl-js-button mdl-button--raised\">\n              <i\n                className=\"material-icons\">{interval.running ? 'pause' : 'play_arrow'}</i></button>\n          </div>\n        </div>\n        <div className=\"mdl-navigation mdl-layout--large-screen-only\">\n          <Output\n            error={interval.error}\n            xSize={size.xCount}\n            ySize={size.yCount}\n            aliveCells={cells.cells.size}\n            cycle={cells.step}\n          />\n        </div>\n      </div>\n    </div>\n  )\n};\n\nexport default connect(mapStateToProps)(Header);\n","import { put, takeEvery, select } from 'redux-saga/effects'\n\nimport db from '../services/db';\nimport { ADD_PATTERN_DONE, TOGGLE_CELL_DONE } from '../constants/cells';\nimport { NEXT_STEP_DONE } from '../constants/life';\nimport { REQUEST_LAST_STEP, RESTORE_LIFE, REQUEST_PREVIOUS_STEP, RECEIVE_PREVIOUS_STEP, RESET_LIFE } from '../constants/lifecycles';\n\nconst CLEANUP_INTERVAL = 60000; // perform DataBase cleanup every minute\nconst CLEANUP_SIZE = 500;\n\nlet interval;\n/*\n\nconst cancelCleanup = () => {\n  clearInterval(interval);\n  interval = null;\n};\n*/\n\nconst runCleanup = () => {\n  interval = setInterval(() => {\n    db.keys().then(r => {\n      if (r.length > CLEANUP_SIZE) {\n        const keysToDelete = r.slice(0, r.length - CLEANUP_SIZE);\n        keysToDelete.forEach(key => db.delete(key));\n        console.log(`Removing ${keysToDelete.length} keys`);\n      }\n    });\n  }, CLEANUP_INTERVAL);\n};\n\nconst getCells = state => state.cells;\n\nfunction resetDb() {\n  db.clear();\n}\n\nfunction saveStep(action) {\n  db.set(action.step, action.cells);\n}\n\nfunction* restoreLife() {\n  yield put({\n    type: RESTORE_LIFE,\n    restore: yield db.getLast()\n  });\n}\n\nfunction* previousStep() {\n  const cells = yield select(getCells);\n  const step = cells.step - 1;\n\n  if (step < 0) return;\n\n  yield put({\n    type: RECEIVE_PREVIOUS_STEP,\n    cells: yield db.get(step)\n  });\n}\n\nfunction* dbSaga() {\n  yield takeEvery(RESET_LIFE, resetDb);\n  yield takeEvery([ADD_PATTERN_DONE, NEXT_STEP_DONE, TOGGLE_CELL_DONE], saveStep);\n  yield takeEvery(REQUEST_LAST_STEP, restoreLife);\n  yield takeEvery(REQUEST_PREVIOUS_STEP, previousStep);\n  runCleanup();\n}\n\nexport default dbSaga;","import { put, takeEvery, select } from 'redux-saga/effects'\n\nimport { ADD_PATTERN, ADD_PATTERN_DONE, TOGGLE_CELL, TOGGLE_CELL_DONE } from '../constants/cells';\nimport { READ_ONLY_ERROR } from '../constants/lifecycles'\nimport { formKey } from '../utils';\n\nconst getCells = state => state.cells;\nconst getSize = state => state.size;\n\nfunction* toggleCell(action) {\n  const { coords: {x, y} } = action;\n  const cells = yield select(getCells);\n\n  const newCells = new Map(cells.cells);\n  const key = formKey(x, y);\n\n  yield put({\n    type: TOGGLE_CELL_DONE,\n    cells: newCells.has(key) ? (newCells.delete(key) && newCells) : (newCells.set(key, 1)),\n    step: cells.step\n  });\n}\n\nfunction* addPattern(action) {\n  const { pattern } = action;\n\n  const cells = yield select(getCells);\n  const size = yield select(getSize);\n\n  const x = size.xCount;\n  const y = size.yCount;\n\n  if (cells.readOnly) {\n    return yield put({\n      type: READ_ONLY_ERROR\n    });\n  }\n\n  const patternString = pattern.split('\\n');\n\n  const patternHeight = patternString.length;\n  let patternWidth = 0;\n\n  patternString.forEach(row => {\n    const len = row.length;\n    if (len > patternWidth) {\n      patternWidth = len;\n    }\n  });\n\n  const startY = Math.floor((y - patternHeight) / 2);\n  const startX = Math.floor((x - patternWidth) / 2);\n\n  const newCells = [];\n  patternString.forEach((row, j) => {\n    row\n      .split('')\n      .forEach((cell, i) => {\n        const x = startX + i;\n        const y = startY + j;\n        if (cell === '*') {\n          newCells.push(formKey(x, y));\n        }\n      });\n  });\n\n  yield put({\n    type: ADD_PATTERN_DONE,\n    pattern,\n    cells: newCells.reduce((acc, key) => {\n      return acc.set(key, 1);\n    }, new Map(cells.cells)),\n    step: cells.step\n  });\n}\n\nfunction* cellSaga() {\n  yield takeEvery(ADD_PATTERN, addPattern);\n  yield takeEvery(TOGGLE_CELL, toggleCell);\n}\n\nexport default cellSaga;","import { put, takeEvery, select, delay } from 'redux-saga/effects';\n\nimport { REQUEST_PREVIOUS_STEP, RESET_LIFE } from '../constants/lifecycles';\nimport { NEXT_STEP, NEXT_STEP_DONE, NEXT_STEP_ERROR, PLAY_LIFE, STOP_LIFE } from '../constants/life';\nimport { countNextGeneration, isEqualMap } from '../utils';\n\nlet interval;\n\nconst getCells = state => state.cells;\nconst getInterval = state => state.interval;\nconst getSize = state => state.size;\n\nfunction* play() {\n  stop();\n\n  const intervalState = yield select(getInterval);\n\n  if (!intervalState.running) {\n    return; //life is stopped!!\n  }\n\n  const timeout = Math.round(60000 / intervalState.frequency);\n\n  const result = yield tick();\n  yield put(result);\n\n  interval = yield delay(timeout);\n  yield play();\n}\n\nfunction* nextStep () {\n  stop();\n  yield put(yield tick());\n}\n\nfunction* tick () {\n\n  const cellsState = yield select(getCells);\n  const size = yield select(getSize);\n\n  const { cells, step } = cellsState;\n\n  const nextGeneration = countNextGeneration(cells, size);\n\n  if (isEqualMap(cells, nextGeneration)) {\n    return {\n      type: NEXT_STEP_ERROR,\n      error: `Life is Stopped!!`\n    };\n  }\n\n  return {\n    type: NEXT_STEP_DONE,\n    step: step + 1,\n    cells: nextGeneration\n  };\n}\n\nfunction stop() {\n  clearInterval(interval);\n}\n\nfunction* playSaga() {\n  yield takeEvery(PLAY_LIFE, play);\n  yield takeEvery(NEXT_STEP, nextStep);\n  yield takeEvery([REQUEST_PREVIOUS_STEP, STOP_LIFE, RESET_LIFE], stop);\n}\n\nexport default playSaga;","import { NEXT_STEP_DONE } from '../constants/life';\nimport { RESET_LIFE, RESTORE_LIFE, RECEIVE_PREVIOUS_STEP } from '../constants/lifecycles';\nimport { ADD_PATTERN_DONE, TOGGLE_CELL_DONE } from '../constants/cells';\n\nconst initState = {\n  cells: new Map(),\n  step: 0,\n  readOnly: false,\n};\n\nexport default (state = initState, action) => {\n\n  switch (action.type) {\n\n    case RESTORE_LIFE:\n      return {\n        ...state,\n        ...action.restore\n      };\n\n    case TOGGLE_CELL_DONE:\n      return state.readOnly ? state : {\n        ...state,\n        cells: action.cells\n      };\n\n    case ADD_PATTERN_DONE:\n\n      return {\n        ...state,\n        cells: action.cells\n      };\n\n    case NEXT_STEP_DONE:\n\n      return {\n        ...state,\n        step: action.step,\n        cells: action.cells,\n        readOnly: false,\n      };\n\n    case RECEIVE_PREVIOUS_STEP:\n    {\n      return {\n        ...state,\n        readOnly: true,\n        cells: action.cells,\n        step: state.step - 1\n      };\n    }\n\n    case RESET_LIFE:\n    {\n      return {\n        ...initState\n      };\n    }\n\n    default:\n      return state;\n  }\n};\n","import { WINDOW_SIZE_CHANGE, SCALE_CHANGE } from '../constants/size';\n\nconst initState = {\n  rectSize: 10,\n  canvasHeight: 0,\n  canvasWidth: 0,\n  xCount: 0,\n  yCount: 0,\n};\n\nexport default (state = initState, action) => {\n\n  switch (action.type) {\n    case WINDOW_SIZE_CHANGE:\n      const { rectSize } = state;\n      const xCount = Math.floor(action.sizes.width / rectSize);\n      const yCount = Math.floor(action.sizes.height / rectSize);\n\n      return {\n        ...state,\n        xCount,\n        yCount,\n        canvasWidth: rectSize * xCount,\n        canvasHeight: rectSize * yCount\n      };\n\n    case SCALE_CHANGE:\n\n      let setRectSize = state.rectSize;\n      const newRectSize = setRectSize + action.direction;\n\n      if ((newRectSize < state.xCount && newRectSize < state.yCount) && (newRectSize >= 2)) {\n\n        return {\n          ...state,\n          rectSize: newRectSize,\n          xCount: Math.floor(state.canvasWidth / newRectSize),\n          yCount: Math.floor(state.canvasHeight / newRectSize)\n        };\n\n      }\n\n      return state;\n\n    default:\n      return state;\n  }\n};\n","import { PLAY_LIFE, STOP_LIFE, NEXT_STEP_ERROR, CHANGE_FREQUENCY, NEXT_STEP } from '../constants/life';\nimport { RESET_LIFE, RECEIVE_PREVIOUS_STEP } from '../constants/lifecycles';\n\nconst initState = {\n  frequency: 120,\n  running: false,\n  error: null\n};\n\nexport default (state = initState, action) => {\n\n  switch (action.type) {\n    case CHANGE_FREQUENCY:\n      return {\n        ...state,\n        error: null,\n        frequency: action.frequency\n      };\n\n    case PLAY_LIFE:\n      return {\n        ...state,\n        error: null,\n        running: true\n      };\n\n    case STOP_LIFE:\n    case RESET_LIFE:\n    case RECEIVE_PREVIOUS_STEP:\n    case NEXT_STEP:\n\n      return {\n        ...state,\n        error: null,\n        running: false,\n      };\n\n    case NEXT_STEP_ERROR:\n\n      return {\n        ...state,\n        running: false,\n        error: action.error\n      };\n\n    default:\n      return state;\n  }\n};\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\n\nimport dbSaga from './sagas/db';\nimport cellsSaga from './sagas/cells';\nimport playSaga from './sagas/play';\n\nimport cellsReducer from './reducers/life';\nimport sizeReducer from './reducers/size';\nimport intervalReducer from './reducers/interval';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst reducers = combineReducers({\n  cells: cellsReducer,\n  size: sizeReducer,\n  interval: intervalReducer,\n});\n\nconst Store = createStore(reducers, applyMiddleware(sagaMiddleware));\n\nsagaMiddleware.run(cellsSaga);\nsagaMiddleware.run(dbSaga);\nsagaMiddleware.run(playSaga);\n\nexport default Store;\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport Container from './containers/Container';\nimport Controls from './containers/Controls';\nimport Header from './containers/Header';\nimport Store from './Store';\nimport './../App.css';\nimport 'material-design-lite';\n\nconst App = () => {\n  return (\n    <Provider store={Store} className=\"App\">\n      <div id=\"App-root\" className=\"mdl-layout mdl-js-layout mdl-layout--fixed-header\">\n        <Header />\n        <Container />\n        <Controls />\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './js/App';\nimport './index.css';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}